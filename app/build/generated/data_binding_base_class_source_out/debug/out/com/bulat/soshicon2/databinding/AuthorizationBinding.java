// Generated by view binder compiler. Do not edit!
package com.bulat.soshicon2.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bulat.soshicon2.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AuthorizationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton authorizationEnter;

  @NonNull
  public final ConstraintLayout containerAuthorization;

  @NonNull
  public final LinearLayout errorMessageOut;

  @NonNull
  public final EditText login;

  @NonNull
  public final EditText password;

  @NonNull
  public final TextView tvRegistration;

  private AuthorizationBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton authorizationEnter, @NonNull ConstraintLayout containerAuthorization,
      @NonNull LinearLayout errorMessageOut, @NonNull EditText login, @NonNull EditText password,
      @NonNull TextView tvRegistration) {
    this.rootView = rootView;
    this.authorizationEnter = authorizationEnter;
    this.containerAuthorization = containerAuthorization;
    this.errorMessageOut = errorMessageOut;
    this.login = login;
    this.password = password;
    this.tvRegistration = tvRegistration;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AuthorizationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AuthorizationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.authorization, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AuthorizationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.authorization_enter;
      MaterialButton authorizationEnter = ViewBindings.findChildViewById(rootView, id);
      if (authorizationEnter == null) {
        break missingId;
      }

      ConstraintLayout containerAuthorization = (ConstraintLayout) rootView;

      id = R.id.error_message_out;
      LinearLayout errorMessageOut = ViewBindings.findChildViewById(rootView, id);
      if (errorMessageOut == null) {
        break missingId;
      }

      id = R.id.login;
      EditText login = ViewBindings.findChildViewById(rootView, id);
      if (login == null) {
        break missingId;
      }

      id = R.id.password;
      EditText password = ViewBindings.findChildViewById(rootView, id);
      if (password == null) {
        break missingId;
      }

      id = R.id.tv_registration;
      TextView tvRegistration = ViewBindings.findChildViewById(rootView, id);
      if (tvRegistration == null) {
        break missingId;
      }

      return new AuthorizationBinding((ConstraintLayout) rootView, authorizationEnter,
          containerAuthorization, errorMessageOut, login, password, tvRegistration);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
